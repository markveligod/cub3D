-------------------------------------------------------------------------------------------------------
Задачи этого проекта схожи со всеми задачами этого первого года: строгость, использование с, использование базовых алгоритмов, исследование информации и т. д.
Как проект графического дизайна, cub3D позволит вам улучшить свои навыки в следующих областях: окна, цвета, события, заливка фигур и т. д.
В заключение следует отметить, что cub3D-это замечательная игровая площадка для изучения игривых практических приложений математики без необходимости понимать специфику.
С помощью многочисленных документов, доступных в интернете, вы будете использовать математику как инструмент для создания элегантных и эффективных алгоритмов.
---------------------------------------------------------------------------------------------------------
Ваш проект должен быть написан в соответствии с нормой. Если у вас есть bonusfiles/функции, они включены в проверку нормы, и вы получите 0, если внутри есть ошибка нормы.
• Ваши функции не должны выходить неожиданно (ошибка сегментации, ошибка шины, двойная свобода и т. д.), Кроме неопределенного поведения. Если это произойдет, ваш проект будет считаться нефункциональным и получит 0 во время оценки.
• При необходимости все выделенное в куче место памяти должно быть надлежащим образом освобождено. Никакие утечки не будут допущены.
• Если субъект требует этого, вы должны представить файл Makefile, который будет компилировать ваши данные.
исходные файлы к требуемому выходу с флагами-Wall, - Wextra и-Werror, а также
ваш Makefile не должен повторно связываться.
• Ваш Makefile должен, по крайней мере, содержать правила $(NAME), all, clean, fclean и
ре.
• Чтобы включить бонусы в свой проект, вы должны включить бонус правила в свой Makefile, который добавит все различные заголовки, librairies или функции, запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus.{з/з}. Обязательная и бонусная часть оценки проводится отдельно.
• Если ваш проект позволяет вам использовать ваш libft, вы должны скопировать его исходные тексты и
связанный файл Makefile в папке libft с соответствующим файлом Makefile. Это ваш проект
Makefile должен скомпилировать библиотеку, используя ее Makefile, а затем скомпилировать проект.
• Мы рекомендуем вам создавать тестовые программы для вашего проекта, даже если эта работа не будет представлена и не будет оценена. Это даст вам шанс
чтобы легко проверить свою работу и работу ваших коллег. Вы найдете эти тесты особенно
полезно во время вашей защиты. Действительно, во время защиты вы можете свободно использовать свои тесты и/или тесты оцениваемого вами сверстника.
* Отправьте свою работу в назначенный вам репозиторий git. Оцениваться будет только работа в репозитории git. Если глубокая мысль назначена для оценки вашей работы, это будет сделано после ваших коллегиальных оценок. Если во время оценки Deepthought произойдет ошибка в каком-либо разделе вашей работы, оценка будет остановлена.
-------------------------------------------------------------------------------------------------------
Эти ограничения заключаются в следующем:
* * Вы должны использовать минилабораторию. Либо версия, которая доступна в операционной системе, либо из ее источников. Если вы решите работать с источниками, вам нужно будет применить те же правила для вашего лифта, что и те, которые были написаны выше в общих чертах
Часть инструкций.
* Управление вашим окном должно оставаться плавным: переход на другое окно, минимизация и т. д.
* Отображение различных текстур стен (Выбор за вами), которые варьируются в зависимости от того, какие из них
сторона стены обращена на Север, Юг, Восток, Запад.
Ваша программа должна иметь возможность отображать элемент (спрайт) вместо стены.
• Ваша программа должна уметь устанавливать цвета пола и цейлинга на два разных цвета.
• Если у Deepthought однажды появятся глаза, чтобы оценить ваш проект, ваша программа должна сохранить первое отрисованное изображение в формате bmp, когда ее второй аргумент - "--save".
• Если второй аргумент не поддерживается, программа отображает изображение в окне и соблюдает следующие правила:
◦ Клавиши со стрелками влево и вправо на клавиатуре должны позволять вам смотреть влево и вправо.
прямо в лабиринте.
Keys клавиши W, A, S и D должны позволять вам перемещать точку зрения через
лабиринт.
Pressing нажатие клавиши ESC должно закрыть окно и полностью выйти из программы.
◦ При нажатии на красный крест на раме окна необходимо закрыть окно и
выйдите из программы чисто.
◦ Если объявленный размер экрана на карте больше разрешения дисплея,
размер окна будет установлен в зависимости от текущего разрешения дисплея.
◦ Настоятельно рекомендуется использовать изображения minilibX.
• Ваша программа должна принять в качестве первого аргумента файл описания сцены с помощью .кубэкстенсион.
Map карта должна состоять только из 4 возможных символов: 0 для пустого символа
пробел, 1 для стены, 2 для предмета и N, S, E или W для начала игрока
положение и ориентация нереста.
Это простая действительная карта:

--------------------------------------------------------------------------------------------------------------------
Карта должна быть закрыта / окружена стенами, если нет, то программа должна вернуть ошибку.
◦ За исключением содержимого карты, каждый тип элемента может быть разделен одной или несколькими пустыми строками.
◦ За исключением содержимого карты, которое всегда должно быть последним, каждый тип элемента может быть установлен в любом порядке в файле.
◦ За исключением карты, каждый тип информации из элемента может быть отделен одним или несколькими пробелами.
Map карта должна быть проанализирована так, как она выглядит в файле. Пробелы являются действительной частью
карта, и это зависит от вас, чтобы справиться. Вы должны быть в состоянии разобрать любую карту, пока она соблюдает правила карт.
Каждый элемент (за исключением карты) первой информацией является идентификатор типа (состоящий из одного или двух символов), за которым следует Вся конкретная информация для каждого элемента
объект в строгом порядке, например :
